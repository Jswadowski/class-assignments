{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Web Scraping (in the shell)\n",
    "\n",
    "```\n",
    "curl\"http://fishbase.org/Summary/SpeciesSummary.php?ID=4249&AT=starry+flounder\" > fish.html | grep \"Fisheries:\" fish.html | cut -d \";\" -f 1  \n",
    "```\n",
    "\n",
    "output: Fisheries: commercial\n",
    "\n",
    "```\n",
    "curl \"http://fishbase.us/summary/SpeciesSummary.php?ID=[10-20]\" | grep Fisheries: | cut -d \";\" -f 1\n",
    "```  \n",
    "Fisheries status for species 10-20\n",
    "\n",
    "Fisheries: commercial Fisheries: minor commercial </span> Fisheries: highly commercial Fisheries: highly commercial Fisheries: minor commercial Fisheries: commercial Fisheries: commercial Fisheries: minor commercial Fisheries: minor commercial  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Limnocottus bergianus\n",
      "Cottinella boulengeri\n",
      "Abyssocottus elochini\n",
      "Abyssocottus gibbosus\n",
      "Abyssocottus gibbosus\n",
      "Limnocottus godlewskii\n",
      "Limnocottus godlewskii\n",
      "Limnocottus griseus\n",
      "Procottus gotoi\n",
      "Procottus gurwicii\n",
      "Asprocottus herzensteini\n",
      "Asprocottus abyssalis\n",
      "Asprocottus intermedius\n",
      "Asprocottus parmiferus\n",
      "Asprocottus platycephalus\n",
      "Procottus jeittelesii\n",
      "Procottus major\n",
      "Procottus gurwicii\n",
      "Procottus jeittelesii\n",
      "Asprocottus korjakovi\n",
      "Asprocottus minor\n",
      "Abyssocottus korotneffi\n",
      "Cyphocottus megalops\n",
      "Cyphocottus megalops\n",
      "Cyphocottus eurystomus\n",
      "Limnocottus pallidus\n",
      "Asprocottus pulcher\n",
      "Neocottus thermalis\n",
      "Neocottus werestschagini\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/eeb177-student/miniconda3/lib/python3.5/site-packages/bs4/__init__.py:181: UserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"html.parser\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n",
      "\n",
      "The code that caused this warning is on line 184 of the file /home/eeb177-student/miniconda3/lib/python3.5/runpy.py. To get rid of this warning, change code that looks like this:\n",
      "\n",
      " BeautifulSoup([your markup])\n",
      "\n",
      "to this:\n",
      "\n",
      " BeautifulSoup([your markup], \"html.parser\")\n",
      "\n",
      "  markup_type=markup_type))\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import urllib.request\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "family_url = \"http://fishbase.org/Nomenclature/NominalSpeciesList.php?Family=Abyssocottidae\"\n",
    "\n",
    "html = urllib.request.urlopen(family_url)\n",
    "html_doc = html.read()\n",
    "html.close()\n",
    "\n",
    "soup = BeautifulSoup(html_doc)\n",
    "\n",
    "# find all links\n",
    "links = soup.find_all(\"a\") # this is a list of all links\n",
    "\n",
    "for link in links:\n",
    "    # find all italic tags within each link\n",
    "    italics = link.find_all(\"i\")\n",
    "    for italic in italics:\n",
    "        # this is the species name\n",
    "        print(italic.string)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import urllib.request\n",
    "import json\n",
    "\n",
    "api_url = \"https://fishbase.ropensci.org/species/?genus=Platichthys&species=stellatus\"\n",
    "raw_json = urllib.request.urlopen(api_url)\n",
    "decoded_json = raw_json.read().decode('utf-8')\n",
    "parsed_json = json.loads(decoded_json) ## we use the json.load method directly\n",
    "raw_json.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['MGillnets', 'DateModified', 'ElectroRef', 'DepthComRef', 'Comments', 'PriceReliability', 'LongevityWild', 'PictureFemale', 'AquacultureRef', 'LongevityCapRef', 'CommonLength', 'LandingStatistics', 'UsedforAquaculture', 'MCastnets', 'FBname', 'LongevityCaptive', 'DepthRangeComShallow', 'FamCode', 'TaxIssue', 'MTraps', 'LengthFemale', 'LTypeMaxF', 'MDredges', 'Landings', 'Brack', 'GenCode', 'PicPreferredName', 'SubGenCode', 'SpeciesRefNo', 'DateChecked', 'MaxLengthRef', 'AquariumFishII', 'Profile', 'Pic', 'DepthRangeComDeep', 'MHooksLines', 'LTypeComF', 'MigratRef', 'DepthRangeDeep', 'MSpears', 'Dangerous', 'Author', 'GoogleImage', 'II', 'Emblematic', 'MLiftnets', 'UsedasBait', 'Modified', 'PicPreferredNameF', 'DemersPelag', 'PriceCateg', 'DepthRangeShallow', 'BodyShapeI', 'AuthorRef', 'Remark', 'MainCatchingMethod', 'Subfamily', 'CommonLengthRef', 'Source', 'GameFish', 'Importance', 'BaitRef', 'Fresh', 'LTypeMaxM', 'Aquarium', 'Genus', 'Expert', 'DangerousRef', 'AquariumRef', 'Length', 'Species', 'LifeCycle', 'WeightFemale', 'PicPreferredNameM', 'TS', 'MSeines', 'Vulnerability', 'Entered', 'PD50', 'GameRef', 'MTrawls', 'ImportanceRef', 'Remarks7', 'LarvaPic', 'MOther', 'Complete', 'AnaCat', 'CommonLengthF', 'LongevityWildRef', 'DateEntered', 'Electrogenic', 'SpecCode', 'MaxWeightRef', 'LTypeComM', 'Saltwater', 'PicPreferredNameJ', 'EggPic', 'DepthRangeRef', 'Weight'])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parsed_json[\"data\"][0].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
